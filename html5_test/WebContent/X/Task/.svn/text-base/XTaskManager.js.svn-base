//==========================================================================================
(function() { var c$ = {__initializing__: false};
//==========================================================================================
var n$ = g$.namespace ("X.Task");
	
g$.import (
	function () {
		g$.import (c$, "X.*");
		g$.import (c$, "X.Collections.*");
//		g$.import (c$. "X.World.Logic.*");

		g$.import (c$, "X.Task.*");
	}
);

//==========================================================================================
	g$.class (c$, n$, {

//==========================================================================================
	name: "XTaskManager", extend: Object, borrows: [],
//==========================================================================================
		
//==========================================================================================
	properties: {
//==========================================================================================
		m_XTasks: null, 		// XDict;
		m_paused: 0,			// Number;
		m_XApp: null, 			// XApp;
	
//==========================================================================================
$: function () {} }, // end properties

//==========================================================================================
	construct:
//==========================================================================================
		// __XApp:XApp
		function (__XApp) {
			if (c$.__initializing__) return;
		
//			Object.call (this);
		
			this.m_XApp = __XApp;
			
			this.m_XTasks = new c$.XDict ();
			
			this.m_paused = 0;
		},

//==========================================================================================
	methods: {
//==========================================================================================

//------------------------------------------------------------------------------------------
		setup: function () { // void
		},
		
//------------------------------------------------------------------------------------------
		cleanup: function () { // void
		},
	
//------------------------------------------------------------------------------------------
		pause: function () { // void
			this.m_paused++;
		},
		
//------------------------------------------------------------------------------------------
		unpause: function () { // void
			this.m_paused--;
		},
		
//------------------------------------------------------------------------------------------
		isTask: function (__task) { // Boolean
			return this.m_XTasks.exists (__task);
		},

//------------------------------------------------------------------------------------------
		getTasks: function () { // XDict
			return this.m_XTasks;
		},

//------------------------------------------------------------------------------------------
		removeAllTasks: function () { // void 
			this.m_XTasks.forEach (
				function (__task) { // void
					this.m_XTasks.remove (__task /* as XTask */);
				}. $ (this)
			);
		},
	
//------------------------------------------------------------------------------------------
		addTask: function (__taskList, __findLabelsFlag) { // XTask
			__findLabelsFlag = __findLabelsFlag ? __findLabelsFlag : true;
	
			var __task = new c$.XTask (__taskList, __findLabelsFlag);
			
			__task.setManager (this);
			__task.setParent (this);
			
			this.m_XTasks.put (__task, 0);
			
			return __task;
		},
		
//------------------------------------------------------------------------------------------
		addXTask: function (__task) { // XTask
			__task.setManager (this);
			__task.setParent (this);
			
			this.m_XTasks.put (__task, 0);
			
			return __task;
		},
		
//------------------------------------------------------------------------------------------
		removeTask: function (__task) { // void
			if (this.m_XTasks.exists (__task)) {
				__task.kill ();
				
				this.m_XTasks.remove (__task);
			}
		},
		
//------------------------------------------------------------------------------------------
		updateTasks: function () { // void
			if (this.m_paused) {
				return;
			}
			
			this.m_XTasks.forEach (
				function (x) { // void
					x.run ();
				}
			);
		},
		
//==========================================================================================
$: function () {} }, // end methods

//==========================================================================================
accessors: {
//==========================================================================================
	
//==========================================================================================
$: {} }, // end accessors

//==========================================================================================
statics: {
//==========================================================================================

//==========================================================================================
$: function () {} }, // end statics

//==========================================================================================
end: []
//==========================================================================================
	});
			
//==========================================================================================
}());