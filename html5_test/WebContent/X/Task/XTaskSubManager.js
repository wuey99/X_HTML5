//==========================================================================================
(function() { var c$ = {__initializing__: false};
//==========================================================================================
var n$ = g$.namespace ("X.Task");
	
g$.import (
	function () {
		g$.import (c$, "X.*");
		g$.import (c$, "X.Collections.*");
//		g$.import (c$, "X.World.Logic.*");
	
		g$.import (c$, "X.Task.*");
	}
);

//==========================================================================================
	g$.class (c$, n$, {

//==========================================================================================
	name: "XTaskSubManager", extend: Object, borrows: [],
//==========================================================================================
		
//==========================================================================================
	properties: {
//==========================================================================================
		m_manager: null, 		// XTaskManager;
		m_XTasks: null, 		// XDict;
	
//==========================================================================================
$: function () {} }, // end properties

//==========================================================================================
	construct:
//==========================================================================================
		function (__manager) {
			if (c$.__initializing__) return;
		
//			Object.call (this);
		
			this.m_manager = __manager;
		
			this.m_XTasks = new c$.XDict ();
		},

//==========================================================================================
	methods: {
//==========================================================================================

//------------------------------------------------------------------------------------------
		setup: function () { // void
		},
		
//------------------------------------------------------------------------------------------
		cleanup: function () { // void
			this.removeAllTasks ();
		},
	
//------------------------------------------------------------------------------------------
		getManager: function () { // XTaskManager
			return this.m_manager;
		},
		
//------------------------------------------------------------------------------------------
		setManager: function (__manager) { // void
			this.m_manager = __manager;
		},
	
//------------------------------------------------------------------------------------------
		addTask: function (
			__taskList,
			__findLabelsFlag
			) { // XTask
				
			__findLabelsFlag = __findLabelsFlag ? __findLabelsFlag : true;
			
			var __task = this.m_manager.addTask (__taskList, __findLabelsFlag);
			
			if (!(this.m_XTasks.exists (__task))) {
				this.m_XTasks.put (__task, 0);
			}
			
			return __task;
		},

//------------------------------------------------------------------------------------------
		addXTask: function (__task) { // XTask
			var __task = this.m_manager.addXTask (__task);
			
			if (!this.m_XTasks.exists (__task)) {
				this.m_XTasks.put(__task, 0);
			}
			
			return __task;			
		},
		
//------------------------------------------------------------------------------------------
		changeTask: function (
			__oldTask,
			__taskList,
			__findLabelsFlag
			) { // XTask
				
			__findLabelsFlag = __findLabelsFlag ? __findLabelsFlag : true;
			
			if (!(__oldTask == null)) {
				this.removeTask (__oldTask);
			}
					
			return this.addTask (__taskList, __findLabelsFlag);
		},
		
//------------------------------------------------------------------------------------------
		changeXTask: function (
			__oldTask,
			__newTask
			) { // XTask {
				
			if (!(__oldTask == null)) {
				this.removeTask (__oldTask);
			}
					
			return this.addXTask (__newTask);
		},
		
//------------------------------------------------------------------------------------------
		isTask: function (__task) { // Boolean
			return this.m_XTasks.exists (__task);
		},		
		
//------------------------------------------------------------------------------------------
		removeTask: function (__task) { // void
			if (this.m_XTasks.exists (__task)) {
				this.m_XTasks.remove (__task);
					
				this.m_manager.removeTask (__task);
			}
		},
		
//------------------------------------------------------------------------------------------
		removeAllTasks: function () { // void
			this.m_XTasks.forEach (
				function (x) { // void
					this.removeTask (x /* as XTask */);
				}.bind (this)
			);
		},
		
//------------------------------------------------------------------------------------------
		addEmptyTask: function () { // XTask
			return this.addTask (this.getEmptyTask$ ());
		},

//------------------------------------------------------------------------------------------
		getEmptyTask$: function () { // Array
			return [
				c$.XTask.LABEL, "loop",
					c$.XTask.WAIT, 0x0100,
				
					c$.XTask.GOTO, "loop",
				
				c$.XTask.RETN,
			];
		},
		
//------------------------------------------------------------------------------------------
		gotoLogic: function (__logic) { // void
			this.removeAllTasks ();
			
			__logic ();
		},
		
//==========================================================================================
$: function () {} }, // end methods

//==========================================================================================
accessors: {
//==========================================================================================
	
//==========================================================================================
$: {} }, // end accessors

//==========================================================================================
statics: {
//==========================================================================================

//==========================================================================================
$: function () {} }, // end statics

//==========================================================================================
end: []
//==========================================================================================
	});
			
//==========================================================================================
}());