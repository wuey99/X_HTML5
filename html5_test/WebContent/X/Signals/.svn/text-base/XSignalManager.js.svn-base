//==========================================================================================
(function() { var c$ = {__initializing__: false};
//==========================================================================================
var n$ = g$.namespace ("X.Signals");
	
g$.import (
	function () {
		g$.import (c$, "X.Signals.*");
		g$.import (c$, "X.Collections.*");
	}
);

//==========================================================================================
	g$.class (c$, n$, {

//==========================================================================================
	name: "XSignalManager", extend: Object, borrows: [],
//==========================================================================================
	
//==========================================================================================
	properties: {
//==========================================================================================
		m_XSignals: null, 			// XDict;		

//==========================================================================================
$: function () {} }, // end properties

//==========================================================================================
	construct:
//==========================================================================================
		function () {
			if (c$.__initializing__) return;
		
//			Object.call (this);
		
			this.m_XSignals = new c$.XDict ();
		},

//==========================================================================================
	methods: {
//==========================================================================================

//------------------------------------------------------------------------------------------
		setup: function () { // void
		},
		
//------------------------------------------------------------------------------------------
		cleanup: function () { // void
		},

//------------------------------------------------------------------------------------------
		isXSignal: function (__signal)  { // Boolean
			return this.m_XSignals.exists (__signal);
		},

//------------------------------------------------------------------------------------------
		getXSignals: function () { // XDict
			return this.m_XSignals;
		},
		
//------------------------------------------------------------------------------------------
		removeAllXSignals: function () { // void
			this.m_XSignals.forEach (
				function (__signal) {
					this.removeXSignal (__signal);
				}.bind (this)
			);
		},
		
//------------------------------------------------------------------------------------------
		removeXSignal: function (__signal) { // void
			if (this.m_XSignals.exists (__signal)) {
				__signal.removeAllListeners ();
				
				m_XSignals.remove (__signal);
			}
		},

//------------------------------------------------------------------------------------------
		createXSignal: function () { // XSignal
			var __signal = new c$.XSignal ();
			
			__signal.setParent (this);
			
			this.m_XSignals.put (__signal, 0);
			
			return __signal;	
		},
		
//==========================================================================================
$: function () {} }, // end methods

//==========================================================================================
end: []
//==========================================================================================
	});
			
//==========================================================================================
}());