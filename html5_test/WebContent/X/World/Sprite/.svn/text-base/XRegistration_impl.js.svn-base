//==========================================================================================
(function() { var c$ = {__initializing__: false};
//==========================================================================================
var n$ = g$.namespace ("X.World.Sprite");
	
g$.import (
		function () {
			g$.import (c$, "X.Geom.*");
		}
	);

//==========================================================================================
	g$.class (c$, n$, {

//==========================================================================================
	name: "XRegistration_impl",  borrows: [],
	
//==========================================================================================

//==========================================================================================
	properties: {
//==========================================================================================
		rp: null,						// XPoint;
		
//==========================================================================================
$: function () {} }, // end properties

//==========================================================================================
	methods: {
//==========================================================================================
		
//------------------------------------------------------------------------------------------
		globalToParent: function () { // XPoint
			var __p /* Point5 */ = this.parent.globalToLocal (this.localToGlobal (this.rp));
			
			return new c$.XPoint (__p.x, __p.y);
		},

//------------------------------------------------------------------------------------------
		// x:Number=0, y:Number=0
		setRegistration: function (x, y) { // void
			x = x ? x : 0;
			y = y ? y : 0;
			
			this.rp = new c$.XPoint (x, y);
		},

//------------------------------------------------------------------------------------------
		getRegistration: function () { // XPoint
			return this.rp;
		},
				
//------------------------------------------------------------------------------------------
		// prop:String, n:Number
		setProperty2: function (prop, n) { // void
			var a /* XPoint */ = this.globalToParent ();
			
			this[prop] = n;

			var b /* XPoint */ = this.globalToParent ();

			this.x -= b.x - a.x;
			this.y -= b.y - a.y;
		},
		
//==========================================================================================
$: function () {} }, // end methods

//==========================================================================================
accessors: {
//==========================================================================================

//------------------------------------------------------------------------------------------
	x2: {
		get: function () {
			g$.trace (": XRegistration_impl: x2: ", this, this.parent, this.parent.globalToLocal);
			
			var p /* XPoint */ = this.globalToParent ();
			
			return p.x;
		},
		
		set: function (__value) {
			var p /* XPoint */ = this.globalToParent ();
			
			this.x += __value - p.x;
		}
	},

//------------------------------------------------------------------------------------------
	y2: {
		get: function () {
			var p /* XPoint */ = this.globalToParent ();
			
			return p.y;
		},
		
		set: function (__value) {
			var p /* XPoint */ = this.globalToParent ();
		
			this.y += __value - p.y;
		}
	},

//------------------------------------------------------------------------------------------
	scaleX2: {
		get: function () {
			return this.scaleX;
		},
		
		set: function (__value) {
			this.setProperty2("scaleX", __value);
		}
	},

//------------------------------------------------------------------------------------------
	scaleY2: {
		get: function () {
			return this.scaleY;
		},
		
		set: function (__value) {
			this.setProperty2("scaleY", __value);
		}
	},

//------------------------------------------------------------------------------------------
	rotation2: {
		get: function () {
			return this.rotation;
		},
		
		set: function (__value) {
			this.setProperty2("rotation", __value);
		}
	},

//------------------------------------------------------------------------------------------
	mouseX2: {
		get: function () {
			return Math.round(this.mouseX - this.rp.x);
		},
		
		set: function (__value) {
			return Math.round(this.mouseY - this.rp.y);
		}
	},

//------------------------------------------------------------------------------------------
	mouseY2: {
		get: function () {
			return Math.round(this.mouseX - this.rp.x);
		},
		
		set: function (__value) {
			Math.round(this.mouseX - this.rp.x);
		}
	},

//==========================================================================================
$: {} }, // end accessors

//==========================================================================================
statics: {
//==========================================================================================

//==========================================================================================
$: function () {} }, // end statics

//==========================================================================================
end: []
//==========================================================================================
	});
			
//==========================================================================================
}());